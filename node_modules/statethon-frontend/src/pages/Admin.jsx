import { useEffect, useMemo, useState } from 'react'
import Navbar from '../components/Navbar.jsx'
import BackButton from '../components/BackButton.jsx'
import LogoutButton from '../components/LogoutButton.jsx'
import { API_BASE_URL } from '../config.js'

export default function Admin(){
	const [summary, setSummary] = useState(null)
	const [error, setError] = useState('')
	const [filter, setFilter] = useState('')

	const fmt = (iso)=>{
		try{
			const d = new Date(iso)
			const pad=(n)=> String(n).padStart(2,'0')
			return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}`
		}catch{return iso}
	}

	useEffect(() => {
		fetch(`${API_BASE_URL}/admin/summary`, { credentials:'include' }).then(async (res) => {
			const contentType = res.headers.get('content-type') || ''
			if(!contentType.includes('application/json')){
				const text = await res.text(); throw new Error(text || `HTTP ${res.status}`)
			}
			const data = await res.json();
			if(!res.ok) throw new Error(data.error || `HTTP ${res.status}`)
			setSummary(data)
		}).catch((e)=> setError(e.message))
	}, [])

	async function updateRole(userId, role){
		const form = new FormData(); form.append('role', role)
		const res = await fetch(`${API_BASE_URL}/admin/user/${userId}/role`, { method:'POST', body: form, credentials:'include' })
		if(!res.ok){ const text = await res.text(); throw new Error(text || `HTTP ${res.status}`) }
		setSummary(s => !s ? s : { ...s, all_users: s.all_users.map(u => u.id === userId ? { ...u, role } : u) })
	}

	const filteredRuns = useMemo(()=>{
		if(!summary) return []
		return (summary.recent_runs || []).filter(r => (r.dataset || '—').toLowerCase().includes(filter.toLowerCase()))
	}, [summary, filter])

	return (
		<div>
			<Navbar />
			<div className="container py-3">
			<div className="d-flex align-items-center justify-content-between mb-3">
				<h3 className="mb-0">Admin dashboard</h3>
				<div className="d-flex gap-2">
					<BackButton className="btn btn-outline-secondary btn-sm" />
					<LogoutButton className="btn btn-outline-danger btn-sm" />
				</div>
			</div>
			{error && <div className="alert alert-danger">{error}</div>}
			{summary && (
				<>
					<div className="row g-3">
						<div className="col-md-3">
							<div className="card p-3 kpi d-flex align-items-center gap-3">
								<div className="icon" style={{width:40,height:40,display:'flex',alignItems:'center',justifyContent:'center',borderRadius:10,background:'#eef2ff',color:'#2563eb'}}><i className="fas fa-users"></i></div>
								<div><div className="text-muted">Users</div><div className="h4 mb-0">{summary.users}</div></div>
							</div>
						</div>
						<div className="col-md-3">
							<div className="card p-3 kpi d-flex align-items-center gap-3">
								<div className="icon" style={{width:40,height:40,display:'flex',alignItems:'center',justifyContent:'center',borderRadius:10,background:'#eef2ff',color:'#2563eb'}}><i className="fas fa-database"></i></div>
								<div><div className="text-muted">Datasets</div><div className="h4 mb-0">{summary.datasets}</div></div>
							</div>
						</div>
						<div className="col-md-3">
							<div className="card p-3 kpi d-flex align-items-center gap-3">
								<div className="icon" style={{width:40,height:40,display:'flex',alignItems:'center',justifyContent:'center',borderRadius:10,background:'#eef2ff',color:'#2563eb'}}><i className="fas fa-cog"></i></div>
								<div><div className="text-muted">Runs</div><div className="h4 mb-0">{summary.runs}</div></div>
							</div>
						</div>
						<div className="col-md-3">
							<div className="card p-3 kpi d-flex align-items-center gap-3">
								<div className="icon" style={{width:40,height:40,display:'flex',alignItems:'center',justifyContent:'center',borderRadius:10,background:'#eef2ff',color:'#2563eb'}}><i className="fas fa-file-pdf"></i></div>
								<div><div className="text-muted">Reports</div><div className="h4 mb-0">{summary.reports}</div></div>
							</div>
						</div>
					</div>

					<div className="row g-3 mt-1">
						<div className="col-lg-6">
							<div className="card p-3">
								<h5 className="mb-3">Latest uploads</h5>
								<div className="table-responsive">
									<table className="table table-striped table-hover align-middle">
										<thead>
											<tr><th>File</th><th>Rows</th><th>Cols</th><th>Owner</th><th>Uploaded</th></tr>
										</thead>
										<tbody>
											{(summary.latest||[]).map((d)=>(
												<tr key={d.id}>
													<td>{d.filename}</td>
													<td>{d.rows}</td>
													<td>{d.columns}</td>
													<td>
														{d.owner_profile_image ? (<img src={d.owner_profile_image} className="rounded-circle me-1" style={{width:24,height:24,objectFit:'cover'}} alt="avatar" />) : (<span className="text-muted">—</span>)}
														{d.owner || ''}
													</td>
													<td><span className="badge bg-light text-dark">{fmt(d.uploaded_at)}</span></td>
												</tr>
											))}
										</tbody>
									</table>
								</div>
							</div>
						</div>
						<div className="col-lg-6">
							<div className="card p-3">
								<div className="d-flex justify-content-between align-items-center mb-3">
									<h5 className="mb-0">Recent runs</h5>
									<input className="form-control form-control-sm" style={{maxWidth:220}} placeholder="Filter by dataset" value={filter} onChange={(e)=>setFilter(e.target.value)} />
								</div>
								<div className="table-responsive">
									<table className="table table-striped table-hover align-middle">
										<thead>
											<tr><th>Dataset</th><th>User</th><th>Success</th><th>Plots</th><th>Time</th></tr>
										</thead>
										<tbody>
											{filteredRuns.map((r)=>(
												<tr key={r.id}>
													<td>{r.dataset || '—'}</td>
													<td>
														{r.user_profile_image ? (<img src={r.user_profile_image} className="rounded-circle me-1" style={{width:24,height:24,objectFit:'cover'}} alt="avatar" />) : (<span className="text-muted">—</span>)}
														{r.user || ''}
													</td>
													<td><span className={`badge ${r.success ? 'bg-success':'bg-danger'}`}>{r.success ? 'ok' : 'fail'}</span></td>
													<td>{r.plots_count}</td>
													<td><span className="badge bg-light text-dark">{fmt(r.created_at)}</span></td>
												</tr>
											))}
										</tbody>
									</table>
								</div>
							</div>
						</div>
					</div>

					<div className="card p-3 mt-3">
						<h5 className="mb-2">User management</h5>
						<div className="table-responsive">
							<table className="table table-striped table-hover align-middle">
								<thead><tr><th>Username</th><th>Email</th><th>Role</th><th>Action</th></tr></thead>
								<tbody>
									{(summary.all_users || []).map(u => (
										<tr key={u.id}>
											<td>{u.username}</td>
											<td>{u.email || '—'}</td>
											<td><span className={`badge ${u.role==='admin' ? 'bg-warning text-dark' : 'bg-secondary'}`}>{u.role}</span></td>
											<td>
												<div className="d-flex gap-2">
													<select className="form-select form-select-sm" style={{maxWidth:140}} value={u.role} onChange={(e)=> updateRole(u.id, e.target.value)}>
														<option value="user">user</option>
														<option value="admin">admin</option>
													</select>
												</div>
											</td>
										</tr>
									))}
								</tbody>
							</table>
						</div>
					</div>
				</>
			)}
			</div>
		</div>
	)
}



